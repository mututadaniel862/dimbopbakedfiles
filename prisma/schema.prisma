generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["multiSchema"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["auth", "public"]
}

model blog_images {
  id        Int    @id @default(autoincrement())
  blog_id   Int?
  image_url String
  blogs     blogs? @relation(fields: [blog_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

model blog_types {
  id          Int     @id @default(autoincrement())
  name        String  @unique @db.VarChar(100)
  image_url   String?
  description String?
  blogs       blogs[]

  @@schema("auth")
}

model blogs {
  id                      Int           @id @default(autoincrement())
  title                   String        @db.VarChar(255)
  description             String
  content                 String
  image_url               String?
  author_id               Int?
  blog_type_id            Int?
  created_at              DateTime?     @default(now()) @db.Timestamp(6)
  hero_image              String?
  blog_image_one          String?
  blog_image_two          String?
  blog_image_three        String?
  author_avatar           String?
  epigraph                String?
  first_paragraph         String?
  second_paragraph        String?
  third_paragraph         String?
  fourth_paragraph        String?
  fifth_paragraph         String?
  annotation_image_one    String?
  annotation_image_two    String?
  annotation_image_three  String?
  annotation_image_four   String?
  annotation_image_five   String?
  point_one_title         String?       @db.VarChar(255)
  point_one_description   String?
  point_two_title         String?       @db.VarChar(255)
  point_two_description   String?
  point_three_title       String?       @db.VarChar(255)
  point_three_description String?
  point_four_title        String?       @db.VarChar(255)
  point_four_description  String?
  point_five_title        String?       @db.VarChar(255)
  point_five_description  String?
  categories              String?       @db.VarChar(255)
  more_blogs              String?
  meta_description        String?
  keywords                String?
  meta_author             String?       @db.VarChar(255)
  meta_og_title           String?       @db.VarChar(255)
  meta_og_url             String?
  meta_og_image           String?
  meta_facebook_id        String?
  meta_site_name          String?
  meta_post_twitter       String?
  status                  String?       @default("visible") @db.VarChar(20)
  blog_images             blog_images[]
  users                   users?        @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  blog_types              blog_types?   @relation(fields: [blog_type_id], references: [id], onUpdate: NoAction)

  @@schema("auth")
}

model cart {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  product_id Int?
  quantity   Int       @default(1)
  price      Decimal   @db.Decimal(10, 2)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @updatedAt
  products   products? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

model categories {
  id       Int        @id @default(autoincrement())
  name     String     @unique @db.VarChar(100)
  products products[]

  @@schema("auth")
}

model financials {
  id          Int       @id @default(autoincrement())
  order_id    Int?
  type        String?   @db.VarChar(50)
  amount      Decimal   @db.Decimal(10, 2)
  description String?
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  orders      orders?   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

model order_items {
  id         Int       @id @default(autoincrement())
  order_id   Int?
  product_id Int?
  quantity   Int       @default(1)
  price      Decimal   @db.Decimal(10, 2)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  updated_at DateTime? @updatedAt
  orders     orders?   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  products   products? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

model orders {
  id           Int           @id @default(autoincrement())
  user_id      Int?
  total_price  Decimal       @db.Decimal(10, 2)
  status       String?       @default("Pending") @db.VarChar(50)
  created_at   DateTime?     @default(now()) @db.Timestamp(6)
  browser_used String?       @db.VarChar(50)
  updated_at   DateTime?     @updatedAt
  financials   financials[]
  order_items  order_items[]
  users        users?        @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  payments     payments[]

  @@schema("auth")
}

model password_resets {
  id          Int       @id @default(autoincrement())
  user_id     Int?
  reset_token String    @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

model payments {
  id             Int       @id @default(autoincrement())
  order_id       Int?
  user_id        Int?
  payment_method String?   @db.VarChar(50)
  transaction_id String    @unique @db.VarChar(255)
  customerMsisdn   String? 
  status         String?   @default("Pending") @db.VarChar(50)
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  orders         orders?   @relation(fields: [order_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users          users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

model products {
  id                  Int           @id @default(autoincrement())
  name                String        @db.VarChar(255)
  description         String?
  price               Decimal       @db.Decimal(10, 2)
  stock_quantity      Int?          @default(0)
  category_id         Int?
  image_url           String?
  created_at          DateTime?     @default(now()) @db.Timestamp(6)
  updated_at          DateTime?     @default(now()) @db.Timestamp(6)
  discount_percentage Int?          @default(0)
  views               Int?          @default(0)
  cart                cart[]
  order_items         order_items[]
  categories          categories?   @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  reviews             reviews[]
   product_views product_views[]

  @@schema("auth")
}

model reports {
  id             Int       @id @default(autoincrement())
  report_type    String?   @db.VarChar(50)
  report_date    DateTime? @default(now()) @db.Timestamp(6)
  report_month   DateTime?
  report_content Json?

  @@schema("auth")
}

model revenue {
  id            Int      @id @default(autoincrement())
  total_income  Decimal? @default(0) @db.Decimal(15, 2)
  total_expense Decimal? @default(0) @db.Decimal(15, 2)
  report_month  DateTime @unique @db.Date

  @@schema("auth")
}

// model reviews {
//   id         Int       @id @default(autoincrement())
//   user_id    Int?
//   product_id Int?
//   rating     Int?
//   comment    String?
//   created_at DateTime? @default(now()) @db.Timestamp(6)
//   products   products? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
//   users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

//   @@schema("auth")
// }


model reviews {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  product_id Int?
  rating     Int?
  comment    String?
 username String @default("Anonymous")
  created_at DateTime? @default(now()) @db.Timestamp(6)
  
  products   products? @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  
  // New relations for likes and comments
  review_likes    review_likes[]
  review_comments review_comments[]
  
  @@schema("auth")
}




model review_likes {
  id        Int      @id @default(autoincrement())
  review_id Int
  user_id   Int?
  is_like   Boolean  // true for like, false for dislike
  created_at DateTime @default(now()) @db.Timestamp(6)
  
  reviews   reviews  @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  
  @@unique([review_id, user_id]) // One like/dislike per user per review
  @@schema("auth")
}


model review_comments {
  id        Int      @id @default(autoincrement())
  review_id Int
  user_id   Int?
  comment   String
username String @default("Anonymous")          
  created_at DateTime @default(now()) @db.Timestamp(6)
  
  reviews   reviews  @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users     users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  
  @@schema("auth")
}


model product_views {
  id         Int      @id @default(autoincrement())
  product_id Int
  user_id    Int?     // Optional for anonymous users
  ip_address String?  // Track anonymous users by IP
  user_agent String?  // Track browser/device info
   username String @default("Anonymous")
  viewed_at  DateTime @default(now()) @db.Timestamp(6)
  
  products   products @relation(fields: [product_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  // users      users?   @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  
  // Prevent duplicate views from same user/IP within short time
  @@unique([product_id, user_id, ip_address])
  @@index([product_id])
  @@index([viewed_at])
  @@schema("auth")
}




model roles {
  id          Int          @id @default(autoincrement())
  name        String       @unique @db.VarChar(50)
  description String?
  user_roles  user_roles[]

  @@schema("auth")
}

model sessions {
  id            Int       @id @default(autoincrement())
  user_id       Int?
  session_token String    @db.VarChar(255)
  created_at    DateTime? @default(now()) @db.Timestamp(6)
  users         users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

model shipping_details {
  id          Int       @id @default(autoincrement())
  user_id     Int?
  full_name   String    @db.VarChar(255)
  country     String    @db.VarChar(100)
  city        String    @db.VarChar(100)
  street      String    @db.VarChar(255)
  apartment   String?   @db.VarChar(255)
  postal_code String    @db.VarChar(20)
  phone       String    @db.VarChar(20)
  email       String    @db.VarChar(255)
  created_at  DateTime? @default(now()) @db.Timestamp(6)
  users       users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

model user_analytics {
  id         Int       @id @default(autoincrement())
  user_id    Int?
  browser    String?   @db.VarChar(50)
  device     String?   @db.VarChar(50)
  created_at DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@schema("auth")
}

model user_roles {
  user_id Int
  role_id Int
  roles   roles @relation(fields: [role_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  users   users @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, role_id])
  @@schema("auth")
}


model multimedia_data {
  id             Int       @id @default(autoincrement())
  user_id        Int?
  file_type      String    @db.VarChar(50) // e.g., pdf, image, audio, video
  file_url       String    @db.VarChar(255)
  extracted_text String?
  created_at     DateTime? @default(now()) @db.Timestamp(6)
  users          users?    @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  @@schema("auth")
}


model users {
  id                       Int                @id @default(autoincrement())
  username                 String             @unique @db.VarChar(100)
  email                    String             @unique @db.VarChar(100)
    phone                    String?            @db.VarChar(20) 
  password_hash            String             @db.VarChar(255)
  created_at               DateTime?          @default(now()) @db.Timestamp(6)
  updated_at               DateTime?          @default(now()) @db.Timestamp(6)
  role                     String?            @default("user") @db.VarChar(50)
  email_verification_token String?            @db.VarChar(255)
  email_verified           Boolean?           @default(false)
  login_token              String?            @db.VarChar(255)
  login_token_expires      DateTime?
  password_changed_at      DateTime?
  password_reset_expires   DateTime?
  password_reset_token     String?            @db.VarChar(255)
  refresh_token            String?            @db.VarChar(255)
  refresh_token_expires    DateTime?
  blogs                    blogs[]
  cart                     cart[]
  orders                   orders[]
  password_resets          password_resets[]
  payments                 payments[]
  reviews                  reviews[]
  review_likes    review_likes[]
  review_comments review_comments[]
  product_views   product_views[]
  sessions                 sessions[]
  shipping_details         shipping_details[]
  user_analytics           user_analytics[]
  user_roles               user_roles[]
  multimedia_data  multimedia_data[] 

  @@index([password_reset_token, password_reset_expires], map: "idx_password_reset_composite")
  @@index([email_verification_token], map: "idx_email_verification_token")
  @@index([refresh_token], map: "idx_refresh_token")
  @@index([login_token], map: "idx_login_token")
  @@index([phone], map: "idx_phone")
  @@schema("auth")
}
